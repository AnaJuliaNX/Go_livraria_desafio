  **INFORMAÇÕES SOBRE AS PAGINAÇÕES:**


// pagAtual := r.URL.Query().Get("page")
// 	page, erro := strconv.Atoi(pagAtual)
// 	if erro != nil {
// 		page = 1 
// 	}
// 	limit := 3
// 	offset := limit * (page - 1)

L.4 pagAtual: vai pegar dentro da minha URL que solicita a funcionalidade os dados da string page

L.5 page, erro: vou converter os parametros recebidos de string para int, assim consigo calcular as páginas
 e se faltar alguma infomação ou a página não for informada ele automaticamente vai deduizir que é 1

L.9 limit: vai limitar para 15 (por padrão) a quantidade e elementos que serão trazidos da busca feita

L.10 offset: vai dizer por qual elemento deve começar a fazer a busca em cada página, para saber por qual
  começar temos um cálculo a fazer
 
  //limit: 15
  //offset := limit * (page -1): 

L.22 page: representa o número da minha página atual 
L.22 limit: representa a quantidade de itens que quero exibir por página 
L.23 (page - 1): subtrai um número da minha página atual, é necessário porque as páginas geralmente começam 
sua contagem em 1 mas os indices em gomeçam a contagem em 0 e assim obtenho o indice da página correto


//   linhas, erro := db.Query("select id, nome from usuario order by id limit ? offset ?", limit, offset)
// 	if erro != nil {
// 		return nil, errors.New("erro ao buscar os usuários")
// 	}
// 	defer linhas.Close()

linhas, erro: executo todos os comando nas linhas da tabela em questão e faço o tratamento do erro 
No select seleciono todos os dados cadastrados no banco e ordenos eles pelo id dando um limite de 15 usuários
por cada seleção e começando pelo de id 1, na segunda página começo pelo de id 16 e assim por diante 
